plugins {
    id 'cpp'
    id 'java'
    id 'google-test'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2025.0'
    id 'edu.wpi.first.NativeUtils' version '2025.9.0'
    id 'edu.wpi.first.GradleJni' version '1.1.0'
    id 'edu.wpi.first.GradleVsCode' version '2.1.0'
    id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-3" // Version should be defined here.
    id "com.diffplug.spotless" version "6.11.0"
}

ext.wpilibVersion = "2025.1.1-beta-3" // and again here, thanks gradle....

repositories {
    mavenCentral()
}
//if (project.hasProperty('releaseMode')) {
wpilibRepositories.addAllReleaseRepositories(project)
//} else {
//wpilibRepositories.addAllDevelopmentRepositories(project)
//}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
var javaVersion = "17"

// Apply C++ configuration
apply from: 'config.gradle'


// Configuration for AdvantageKit
repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}


// Apply Java configuration
dependencies {
    //    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    implementation "edu.wpi.first.cscore:cscore-java:$wpilibVersion"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$wpilibVersion"
    implementation "edu.wpi.first.ntcore:ntcore-java:$wpilibVersion"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$wpilibVersion"
    implementation "edu.wpi.first.wpimath:wpimath-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiunits:wpiunits-java:$wpilibVersion"
    implementation "edu.wpi.first.hal:hal-java:$wpilibVersion"
    implementation "org.ejml:ejml-simple:0.43.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    implementation 'edu.wpi.first.thirdparty.frc2024.opencv:opencv-java:4.8.0-2'

    implementation 'com.alibaba.fastjson2:fastjson2:2.0.46'
    implementation 'com.alibaba:fastjson:2.0.28'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

// Set up exports properly
nativeUtils {
    exportsConfigs {
        // Main library is just default empty. This will export everything
        BobcatLib {
        }
    }
}

javadoc {
    destinationDir = file("docs")
    options {
        links "https://docs.oracle.com/en/java/javase/$javaVersion/docs/api/",
                'https://github.wpilib.org/allwpilib/docs/release/java/',
                'https://codedocs.revrobotics.com/java/',
                'https://api.ctr-electronics.com/phoenix6/release/java/',
                'https://api.ctr-electronics.com/phoenix/release/java/',
                "https://shenzhen-robotics-alliance.github.io/maple-sim/javadocs/",
                "https://www.kauailabs.com/public_files/navx-mxp/apidocs/java/",
                "https://apidocs.reduxrobotics.com/current/java/"
    }
}

model {
    components {
    }
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    cpp {
        target fileTree('.') {
            include '**/*.cpp', '**/*.h'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseCdt()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

spotlessCpp.dependsOn javadoc
spotlessJava.dependsOn javadoc
spotlessGroovyGradle.dependsOn javadoc
spotlessMisc.dependsOn javadoc

build.dependsOn spotlessApply

apply from: 'publish.gradle'

wrapper {
    gradleVersion '8.11'
}
